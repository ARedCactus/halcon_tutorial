<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="21.11.0.0">
<procedure name="main">
<interface/>
<body>
<l>Thresh := 35</l>
<l>dev_update_window ('off')</l>
<l>dev_update_pc ('off')</l>
<l>dev_update_var ('off')</l>
<l>dev_set_draw ('margin')</l>
<l>dev_set_colored (12)</l>
<l>dev_set_line_width (3)</l>
<l>dev_close_window ()</l>
<c></c>
<c as_id="image_acquisition" as_name="Image Acquisition 02" as_grp="[1,1]" as_ord="1">* Image Acquisition 02: Code generated by Image Acquisition 02</c>
<l as_id="image_acquisition" as_name="Image Acquisition 02" as_grp="[1,2,1]" as_ord="1">open_framegrabber ('DirectShow', 1, 1, 0, 0, 0, 0, 'default', 8, 'rgb', -1, 'false', 'default', '[1] Integrated Camera', 0, -1, AcqHandle)</l>
<c></c>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,2,1]" as_ord="1">*open_framegrabber ('DirectShow', 1, 1, 0, 0, 0, 0, 'default', 8, 'gray', -1, 'false', 'default', '[0] YW500', 0, -1, AcqHandle)</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[2,1]" as_ord="1">grab_image_start (AcqHandle, -1)</l>
<l>grab_image_async (Image_n1, AcqHandle, -1)</l>
<c></c>
<l>dev_open_window_fit_image (Image_n1, 0, 0, -1, -1, WindowHandle)</l>
<c></c>
<c></c>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[2,2]" as_ord="1">while (true)</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[2,3]" as_ord="1">    grab_image_async (Image_n, AcqHandle, -1)</l>
<l>    dyn_threshold (Image_n1, Image_n, RegionDynThresh, Thresh, 'not_equal')</l>
<l>    opening_circle (RegionDynThresh, RegionOpening, 2.5)</l>
<l>    closing_circle (RegionDynThresh, RegionClosing, 3.5)</l>
<l>    connection (RegionClosing, ConnectedRegions)</l>
<l>    shape_trans (ConnectedRegions, RegionTrans, 'convex')</l>
<l>    dev_display (Image_n)</l>
<l>    dev_display (RegionTrans)</l>
<l>    select_obj (Image_n, Img_n_1, 1)</l>
<l>*    wait_seconds (0.01)</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[3,1]" as_ord="1">endwhile</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[4,1]" as_ord="1">close_framegrabber (AcqHandle)</l>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="display_found_data_codes">
<interface>
<io>
<par name="SymbolXLDs" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="WindowHandle" base_type="ctrl" dimension="0"/>
<par name="DecodedDataStrings" base_type="ctrl" dimension="0"/>
<par name="TitleMessage" base_type="ctrl" dimension="0"/>
<par name="ResultMessage" base_type="ctrl" dimension="0"/>
<par name="ColorDecodedStrings" base_type="ctrl" dimension="0"/>
<par name="ColorResult" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>dev_update_off ()</l>
<l>dev_close_window ()</l>
<l>ImageFiles := 'datacode/qrcode/qr_workpiece_'</l>
<l>ImageNum := 9</l>
<l>read_image (Image, ImageFiles + '01')</l>
<l>dev_open_window_fit_image (Image, 0, 0, -1, -1, WindowHandle)</l>
<l>set_display_font (WindowHandle, 16, 'mono', 'true', 'false')</l>
<l>dev_set_line_width (3)</l>
<l>dev_set_color ('green')</l>
<c>* </c>
<c>* Display short description.</c>
<c></c>
<l>stop ()</l>
<c>* </c>
<c>* Step 1: Create data code model.</c>
<c>* ----------------------------------------------------</c>
<c>* Create a 2d data code model of the 2d data code class</c>
<c>* 'QR Code'. The operator returns a handle to the</c>
<c>* 2d data code model which can be used for all further</c>
<c>* operations on the data code.</c>
<l>create_data_code_2d_model ('QR Code', [], [], DataCodeHandle)</l>
<c>* </c>
<c>* Step 2: Read the data codes.</c>
<c>* ----------------------------------------------------</c>
<c>* Search and read the data codes in each image and</c>
<c>* display the decoded string for each found data code.</c>
<l>for Index := 1 to ImageNum by 1</l>
<l>    read_image (Image, ImageFiles + Index$'.2d')</l>
<l>    find_data_code_2d (Image, SymbolXLDs, DataCodeHandle, [], [], ResultHandles, DecodedDataStrings)</l>
<c>    * </c>
<c>    * Display the results.</c>
<l>    dev_display (Image)</l>
<l>    dev_display (SymbolXLDs)</l>
<l>    dev_disp_text ('Image ' + Index + ' of ' + ImageNum, 'window', 12, 12, 'black', [], [])</l>
<l>    dev_disp_text (DecodedDataStrings, 'window', 40, 12, 'black', [], [])</l>
<l>    Message := 'No data code found.'</l>
<l>    Message[1] := 'The symbol could not be found with the standard'</l>
<l>    Message[2] := 'default setting. Please adjust the model parameters'</l>
<l>    Message[3] := 'to read this symbol.'</l>
<c>    * </c>
<c>    * If no data code could be found.</c>
<l>    if (|DecodedDataStrings| == 0)</l>
<l>        dev_disp_text (Message, 'window', 40, 12, 'red', [], [])</l>
<l>    endif</l>
<c>    * </c>
<c>    * Deactivate the following lines to run the program without breaks.</c>
<l>    if (Index &lt; ImageNum)</l>
<l>        dev_disp_text ('Press Run (F5) to continue', 'window', 'bottom', 'right', 'black', [], [])</l>
<l>        stop ()</l>
<l>    endif</l>
<l>endfor</l>
</body>
<docu id="display_found_data_codes">
<parameters>
<parameter id="ColorDecodedStrings"/>
<parameter id="ColorResult"/>
<parameter id="DecodedDataStrings"/>
<parameter id="ResultMessage"/>
<parameter id="SymbolXLDs"/>
<parameter id="TitleMessage"/>
<parameter id="WindowHandle"/>
</parameters>
</docu>
</procedure>
</hdevelop>
