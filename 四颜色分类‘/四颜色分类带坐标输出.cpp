///////////////////////////////////////////////////////////////////////////////
// File generated by HDevelop for HALCON/C++ Version 21.11.0.0
// Non-ASCII strings in this file are encoded in local-8-bit encoding (cp936).
// Ensure that the interface encoding is set to locale encoding by calling
// SetHcppInterfaceStringEncodingIsUtf8(false) at the beginning of the program.
// 
// Please note that non-ASCII characters in string constants are exported
// as octal codes in order to guarantee that the strings are correctly
// created on all systems, independent on any compiler settings.
// 
// Source files with different encoding should not be mixed in one project.
///////////////////////////////////////////////////////////////////////////////



#ifndef __APPLE__
#  include "HalconCpp.h"
#  include "HDevThread.h"
#else
#  ifndef HC_LARGE_IMAGES
#    include <HALCONCpp/HalconCpp.h>
#    include <HALCONCpp/HDevThread.h>
#    include <HALCON/HpThread.h>
#  else
#    include <HALCONCppxl/HalconCpp.h>
#    include <HALCONCppxl/HDevThread.h>
#    include <HALCONxl/HpThread.h>
#  endif
#  include <stdio.h>
#  include <CoreFoundation/CFRunLoop.h>
#endif



using namespace HalconCpp;


#ifndef NO_EXPORT_MAIN
// Main procedure 
void action()
{

  // Local iconic variables
  HObject  ho_Image_n0, ho_Image_n, ho_ClassRegions;
  HObject  ho_ObjectsSelected, ho_ConnectedRegions, ho_RegionFillUp;
  HObject  ho_SelectedRegions, ho_RegionTrans;

  // Local control variables
  HTuple  hv_AcqHandle, hv_Width, hv_Height, hv_WindowHandle;
  HTuple  hv_Regions, hv_Highlight, hv_MLPHandle, hv_Figure;
  HTuple  hv_Area, hv_Row3, hv_Column3, hv_Area_max, hv_Row_x;
  HTuple  hv_Column_y;

  OpenFramegrabber("DirectShow", 1, 1, 0, 0, 0, 0, "default", 8, "rgb", -1, "false", 
      "default", "[0] YW500", 0, -1, &hv_AcqHandle);
  GrabImageStart(hv_AcqHandle, -1);
  GrabImageAsync(&ho_Image_n0, hv_AcqHandle, -1);
  GetImageSize(ho_Image_n0, &hv_Width, &hv_Height);
  SetWindowAttr("background_color","white");
  OpenWindow(0,0,hv_Width*2,hv_Height*2,0,"visible","",&hv_WindowHandle);
  HDevWindowStack::Push(hv_WindowHandle);
  if (HDevWindowStack::IsOpen())
    DispObj(ho_Image_n0, HDevWindowStack::GetActive());
  hv_Regions.Clear();
  hv_Regions[0] = "red";
  hv_Regions[1] = "green";
  hv_Regions[2] = "blue";
  hv_Regions[3] = "black";
  hv_Regions[4] = "background";
  hv_Highlight.Clear();
  hv_Highlight[0] = "red";
  hv_Highlight[1] = "green";
  hv_Highlight[2] = "blue";
  hv_Highlight[3] = "black";

  ReadClassMlp("train_mlp_3color", &hv_MLPHandle);
  while (true)
  {
    GrabImageAsync(&ho_Image_n, hv_AcqHandle, -1);
    ClassifyImageClassMlp(ho_Image_n, &ho_ClassRegions, hv_MLPHandle, 0.5);

    for (hv_Figure=1; hv_Figure<=4; hv_Figure+=1)
    {
      CopyObj(ho_ClassRegions, &ho_ObjectsSelected, hv_Figure, 1);
      Connection(ho_ObjectsSelected, &ho_ConnectedRegions);
      FillUp(ho_ConnectedRegions, &ho_RegionFillUp);
      AreaCenter(ho_RegionFillUp, &hv_Area, &hv_Row3, &hv_Column3);
      SelectShape(ho_RegionFillUp, &ho_SelectedRegions, "area", "and", hv_Area.TupleMax(), 
          99999);
      ShapeTrans(ho_SelectedRegions, &ho_RegionTrans, "inner_rectangle1");
      AreaCenter(ho_RegionTrans, &hv_Area_max, &hv_Row_x, &hv_Column_y);
      if (HDevWindowStack::IsOpen())
        SetColor(HDevWindowStack::GetActive(),HTuple(hv_Highlight[hv_Figure-1]));
      if (HDevWindowStack::IsOpen())
        DispObj(ho_RegionTrans, HDevWindowStack::GetActive());

    }
    WaitSeconds(0.01);
  }
  CloseFramegrabber(hv_AcqHandle);
}


#ifndef NO_EXPORT_APP_MAIN

#ifdef __APPLE__
// On OS X systems, we must have a CFRunLoop running on the main thread in
// order for the HALCON graphics operators to work correctly, and run the
// action function in a separate thread. A CFRunLoopTimer is used to make sure
// the action function is not called before the CFRunLoop is running.
// Note that starting with macOS 10.12, the run loop may be stopped when a
// window is closed, so we need to put the call to CFRunLoopRun() into a loop
// of its own.
static HMutex*     sStartMutex;
static H_pthread_t sActionThread;
static bool        sTerminate = false;

static void timer_callback(CFRunLoopTimerRef timer, void *info)
{
  sStartMutex->UnlockMutex();
}

static Herror apple_action(void **parameters)
{
  // Wait until the timer has fired to start processing.
  sStartMutex->LockMutex();
  sStartMutex->UnlockMutex();

  try
  {
    action();
  }
  catch (HException &exception)
  {
    fprintf(stderr,"  Error #%u in %s: %s\n", exception.ErrorCode(),
            exception.ProcName().TextA(),
            exception.ErrorMessage().TextA());
  }

  // Tell the main thread to terminate itself.
  sStartMutex->LockMutex();
  sTerminate = true;
  sStartMutex->UnlockMutex();
  CFRunLoopStop(CFRunLoopGetMain());
  return H_MSG_OK;
}

static int apple_main(int argc, char *argv[])
{
  Herror                error;
  CFRunLoopTimerRef     Timer;
  CFRunLoopTimerContext TimerContext = { 0, 0, 0, 0, 0 };

  sStartMutex = new HMutex("type","sleep");
  sStartMutex->LockMutex();

  error = HpThreadHandleAlloc(&sActionThread);
  if (H_MSG_OK != error)
  {
    fprintf(stderr,"HpThreadHandleAlloc failed: %d\n", error);
    exit(1);
  }

  error = HpThreadCreate(sActionThread,0,apple_action);
  if (H_MSG_OK != error)
  {
    fprintf(stderr,"HpThreadCreate failed: %d\n", error);
    exit(1);
  }

  Timer = CFRunLoopTimerCreate(kCFAllocatorDefault,
                               CFAbsoluteTimeGetCurrent(),0,0,0,
                               timer_callback,&TimerContext);
  if (!Timer)
  {
    fprintf(stderr,"CFRunLoopTimerCreate failed\n");
    exit(1);
  }
  CFRunLoopAddTimer(CFRunLoopGetCurrent(),Timer,kCFRunLoopCommonModes);

  for (;;)
  {
    bool terminate;

    CFRunLoopRun();

    sStartMutex->LockMutex();
    terminate = sTerminate;
    sStartMutex->UnlockMutex();

    if (terminate)
      break;
  }

  CFRunLoopRemoveTimer(CFRunLoopGetCurrent(),Timer,kCFRunLoopCommonModes);
  CFRelease(Timer);

  error = HpThreadHandleFree(sActionThread);
  if (H_MSG_OK != error)
  {
    fprintf(stderr,"HpThreadHandleFree failed: %d\n", error);
    exit(1);
  }

  delete sStartMutex;
  return 0;
}
#endif

int main(int argc, char *argv[])
{
  int ret = 0;

  try
  {
#if defined(_WIN32)
    SetSystem("use_window_thread", "true");
#endif

    // file was stored with local-8-bit encoding
    //   -> set the interface encoding accordingly
    SetHcppInterfaceStringEncodingIsUtf8(false);

    // Default settings used in HDevelop (can be omitted)
    SetSystem("width", 512);
    SetSystem("height", 512);

#ifndef __APPLE__
    action();
#else
    ret = apple_main(argc,argv);
#endif
  }
  catch (HException &exception)
  {
    fprintf(stderr,"  Error #%u in %s: %s\n", exception.ErrorCode(),
            exception.ProcName().TextA(),
            exception.ErrorMessage().TextA());
    ret = 1;
  }
  return ret;
}

#endif


#endif


